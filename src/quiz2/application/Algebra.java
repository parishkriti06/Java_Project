package quiz2.application;





import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class Algebra extends JFrame implements ActionListener {

    String questions[][] = new String[20][6];
   // String answers[][] = new String[20][2];
    String useranswers[][] = new String[20][1];
    JLabel qno, question;
    JRadioButton opt1, opt2, opt3,opt4;
    ButtonGroup groupoptions;
    JButton next,  submit, calculatorButton;

    public static int timer = 60;
    public static int ans_given = 0;
    public static int count = 0;
    public static int score = 0;

    String username;

    CalculatorFrame calculatorFrame;

    Algebra(String username) {
        
        
        this.username = username;
        setBounds(0, 0, 1600, 900); 
        getContentPane().setBackground(new Color(148,97,212)); 
        setLayout(null);
        setVisible(true);

        ImageIcon i1 = new ImageIcon(ClassLoader.getSystemResource("quizz/al.png"));
        JLabel image = new JLabel(i1);
        image.setBounds(0, 0, 1600, 500); 
        add(image);

        qno = new JLabel();
        qno.setBounds(100, 520, 50, 30); 
        qno.setFont(new Font("Tahona", Font.PLAIN, 24));
        add(qno);

        question = new JLabel();
        question.setBounds(150, 520, 1400, 30); 
        question.setFont(new Font("Tahona", Font.PLAIN, 24));
        add(question);
        
        questions[0][0] = " A non-empty set A is termed as an algebraic structure ________";
questions[0][1] = "a) with respect to binary operation *";
questions[0][2] = "b) with respect to ternary operation ?";
questions[0][3] = "c) with respect to binary operation +";
questions[0][4] = "d) with respect to unary operation –";
questions[0][5] = "a) with respect to binary operation *";

questions[1][0] = " An algebraic structure _________ is called a semigroup.";
questions[1][1] = "a) (P, *)";
questions[1][2] = "b) (Q, +, *)";
questions[1][3] = "c) (P, +)";
questions[1][4] = "d) (+, *)";
questions[1][5] = "a) (P, *)";

questions[2][0] = " Condition for monoid is __________";
questions[2][1] = "a) (a+e)=a";
questions[2][2] = "b) (a*e)=(a+e)";
questions[2][3] = "c) a=(a*(a+e)";
questions[2][4] = "d) (a*e)=(e*a)=a";
questions[2][5] = "d) (a*e)=(e*a)=a";

questions[3][0] = " A monoid is called a group if _______";
questions[3][1] = "a) (a*a)=a=(a+c)";
questions[3][2] = "b) (a*c)=(a+c)";
questions[3][3] = "c) (a+c)=a";
questions[3][4] = "d) (a*c)=(c*a)=e";
questions[3][5] = "d) (a*c)=(c*a)=e";

questions[4][0] = " A group (M,*) is said to be abelian if _________";
questions[4][1] = "a) (x+y)=(y+x)";
questions[4][2] = "b) (x*y)=(y*x)";
questions[4][3] = "c) (x+y)=x";
questions[4][4] = "d) (y*x)=(x+y)";
questions[4][5] = "b) (x*y)=(y*x)";

questions[5][0] = " Matrix multiplication is a/an _________ property.";
questions[5][1] = "a) Commutative";
questions[5][2] = "b) Associative";
questions[5][3] = "c) Additive";
questions[5][4] = "d) Disjunctive";
questions[5][5] = "b) Associative";

questions[6][0] = " A cyclic group can be generated by a/an ________ element.";
questions[6][1] = "a) singular";
questions[6][2] = "b) non-singular";
questions[6][3] = "c) inverse";
questions[6][4] = "d) multiplicative";
questions[6][5] = "a) singular";

questions[7][0] = " How many properties can be held by a group?";
questions[7][1] = "a) 2";
questions[7][2] = "b) 3";
questions[7][3] = "c) 5";
questions[7][4] = "d) 4";
questions[7][5] = "c) 5";

questions[8][0] = " A cyclic group is always _________";
questions[8][1] = "a) abelian group";
questions[8][2] = "b) monoid";
questions[8][3] = "c) semigroup";
questions[8][4] = "d) subgroup";
questions[8][5] = "a) abelian group";

questions[9][0] = "{1, i, -i, -1} is ________";
questions[9][1] = "a) semigroup";
questions[9][2] = "b) subgroup";
questions[9][3] = "c) cyclic group";
questions[9][4] = "d) abelian group";
questions[9][5] = "c) cyclic group";

questions[10][0] = " This is an abelian group { – 3n : n ∈ Z } under?";
questions[10][1] = "A. division";
questions[10][2] = "B. subtraction";
questions[10][3] = "C. addition";
questions[10][4] = "D. multiplication";
questions[10][5] = "C. addition";

questions[11][0] = " What is the inverse of –ι if G = { 1, -1, ι, –ι } is a group under multiplication?";
questions[11][1] = "A. −1";
questions[11][2] = "B. ι";
questions[11][3] = "C. 1";
questions[11][4] = "D. None of Above";
questions[11][5] = "B. ι";

questions[12][0] = " The monoid is a?";
questions[12][1] = "A. a non-abelian group";
questions[12][2] = "B. groupoid";
questions[12][3] = "C. A group";
questions[12][4] = "D. a commutative group";
questions[12][5] = "A. a non-abelian group";

questions[13][0] = " (ba)-1 =_____ If a, b are elements of a group G?";
questions[13][1] = "A. b-1a";
questions[13][2] = "B. ab-1";
questions[13][3] = "C. ba-1";
questions[13][4] = "D. a-1b";
questions[13][5] = "D. a-1b";

questions[14][0] = " What is an inverse of –i in the multiplicative group if {1, –1, i , – i} is?";
questions[14][1] = "A. -1";
questions[14][2] = "B. 1";
questions[14][3] = "C. i";
questions[14][4] = "D. None of these";
questions[14][5] = "C. i";

questions[15][0] = " What is the value of (a-1b)-1 is in the group (G, .)?";
questions[15][1] = "A. b- 1a";
questions[15][2] = "B. ab-1";
questions[15][3] = "C. ba-1";
questions[15][4] = "D. a-1b";
questions[15][5] = "A. b- 1a";

questions[16][0] = " What is the inverse of an if (Z,*) is a group with a*b = a+b+1 ∀ a, b ∈Z?";
questions[16][1] = "A. -2";
questions[16][2] = "B. 0";
questions[16][3] = "C. -a-2";
questions[16][4] = "D. a-2";
questions[16][5] = "C. -a-2";

questions[17][0] = " Which sentence is true?";
questions[17][1] = "A. Set of all matrices forms a group under multiplication";
questions[17][2] = "B. Set of all rational negative numbers forms a group under multiplication";
questions[17][3] = "C. Set of all non-singular matrices forms a group under multiplication";
questions[17][4] = "D. Both (b) and (c)";
questions[17][5] = "C. Set of all non-singular matrices forms a group under multiplication";

questions[18][0] = " Which statement is false?";
questions[18][1] = "A. The set of rational integers is an abelian group under addition";
questions[18][2] = "B. The set of rational numbers form an abelian group under multiplication";
questions[18][3] = "C. The set of rational numbers is an abelian group under addition";
questions[18][4] = "D. None of these";
questions[18][5] = "B. The set of rational numbers form an abelian group under multiplication";

questions[19][0] = " What is the identity element In the group G = {2, 4, 6, 8) under multiplication modulo 10?";
questions[19][1] = "A. 5";
questions[19][2] = "B. 9";
questions[19][3] = "C. 6";
questions[19][4] = "D. 12";
questions[19][5] = "C. 6";

        
        
         
        shuffleQuestions();

        selectRandomQuestions(10);
        
        opt1 = new JRadioButton();
        opt1.setBounds(100, 580, 1400, 30); 
        opt1.setBackground(Color.WHITE);
        opt1.setFont(new Font("Dialog", Font.PLAIN, 20));
        add(opt1);

        opt2 = new JRadioButton();
        opt2.setBounds(100, 620, 1400, 30); 
        opt2.setBackground(Color.WHITE);
        opt2.setFont(new Font("Dialog", Font.PLAIN, 20));
        add(opt2);

        opt3 = new JRadioButton();
        opt3.setBounds(100, 660, 1400, 30); 
        opt3.setBackground(Color.WHITE);
        opt3.setFont(new Font("Dialog", Font.PLAIN, 20));
        add(opt3);

        opt4 = new JRadioButton();
        opt4.setBounds(100, 700, 1400, 30); 
        opt4.setBackground(Color.WHITE);
        opt4.setFont(new Font("Dialog", Font.PLAIN, 20));
        add(opt4);
        
        next = new JButton("Next");
        next.setBounds(100, 740, 200, 40); 
        next.setFont(new Font("Tahona", Font.PLAIN, 22));
        next.setBackground(new Color(29,11,98));
        next.setForeground(Color.WHITE);
        next.addActionListener(this);
        add(next);


        submit = new JButton("Submit");
        submit.setBounds(330, 740, 200, 40); 
        submit.setFont(new Font("Tahona", Font.PLAIN, 22));
        submit.setBackground(new Color(29,11,98));
        submit.setForeground(Color.WHITE);
        submit.setEnabled(false);
        submit.addActionListener(this);
        add(submit);

        groupoptions = new ButtonGroup();
        groupoptions.add(opt1);
        groupoptions.add(opt2);
        groupoptions.add(opt3);
         groupoptions.add(opt4);

        

        calculatorFrame = new CalculatorFrame();

        calculatorButton = new JButton("Calculator");
        calculatorButton.setBounds(1360, 50, 120, 30);
        calculatorButton.setFont(new Font("Dialog", Font.PLAIN, 18));
        calculatorButton.addActionListener(this);
        add(calculatorButton);

        start(count);
    }
    
    
     private void shuffleQuestions() {
        List<String[]> questionsList = Arrays.asList(questions);
        Collections.shuffle(questionsList);
        questionsList.toArray(questions);
    }

    private void selectRandomQuestions(int numQuestions) {
        questions = Arrays.copyOf(questions, numQuestions);
    }
    
     private void calculateScore() {
    for (int i = 0; i < questions.length; i++) {
        if (useranswers[i][0].equalsIgnoreCase(questions[i][5])) {
            score= score+10;
        }
    }
}

    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == next) {
            repaint();
            opt1.setEnabled(true);
            opt2.setEnabled(true);
            opt3.setEnabled(true);
             opt4.setEnabled(true);
            ans_given = 1;
            if (groupoptions.getSelection() == null) {
                useranswers[count][0] = "";
            } else {
                useranswers[count][0] = groupoptions.getSelection().getActionCommand();
            }

            if (count == 8) {
                next.setEnabled(false);
                submit.setEnabled(true);
            }
            count++;
            start(count);
        } 
            
           

            else if (ae.getSource() == submit) {
            if (count == 9) {
                if (groupoptions.getSelection() == null) {
                    useranswers[count][0] = "";
                } else {
                    useranswers[count][0] = groupoptions.getSelection().getActionCommand();
                }
                calculateScore();
                setVisible(false);
                new Score(username, score); 
            }
        }

        
        else if (ae.getSource() == calculatorButton) {
            calculatorFrame.setVisible(true); 
        }
    }

    public void paint(Graphics g) {
        super.paint(g);

        String time = "time left : " + timer + " seconds";
        g.setColor(Color.RED);
        g.setFont(new Font("Tahona", Font.BOLD, 25));

        
            
            
            if (timer > 0) {
            g.drawString(time, 1200, 450); 
        } else {
            g.drawString("Time's up!!", 1200, 450); 
            opt1.setEnabled(true);
            opt2.setEnabled(true);
            opt3.setEnabled(true);
             opt4.setEnabled(true);

            if (count == 8) {
                next.setEnabled(false);
                submit.setEnabled(true);
            }
            if (count == 9) {
                if (groupoptions.getSelection() == null) {
                    useranswers[count][0] = "";
                } else {
                    useranswers[count][0] = groupoptions.getSelection().getActionCommand();
                }
                setVisible(false);
                calculateScore();
                new Score(username, score); 
            } else {
                if (groupoptions.getSelection() == null) {
                    useranswers[count][0] = "";
                } else {
                    useranswers[count][0] = groupoptions.getSelection().getActionCommand();
                }
                count++;

                if (count < questions.length) {
                    start(count);
                    timer = 60;
                } else {
                    submit.setEnabled(true);
                }
            }
        }

        timer--;

        try {
            Thread.sleep(1000);
            repaint();

        } catch (Exception e) {
            e.printStackTrace();
        }

        if (ans_given == 1) {
            ans_given = 0;
            timer = 60;
        }
    }

    public void start(int count) {
        qno.setText("" + (count + 1) + ".");
        question.setText(questions[count][0]);

        opt1.setText(questions[count][1]);
        opt1.setActionCommand(questions[count][1]);
        opt2.setText(questions[count][2]);
        opt2.setActionCommand(questions[count][2]);
        opt3.setText(questions[count][3]);
        opt3.setActionCommand(questions[count][3]);
        opt4.setText(questions[count][4]);
        opt4.setActionCommand(questions[count][4]);
        groupoptions.clearSelection();
    }
    
   
    
    public void resetQuiz() {
    count = 0;
    start(count);
    timer = 60;
    score=0;
    submit.setEnabled(false);
}

    public static void main(String[] args) {
        new Algebra("user");
    }
}

